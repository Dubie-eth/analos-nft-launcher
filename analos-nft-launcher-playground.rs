use anchor_lang::prelude::*;
use anchor_spl::token::{self, Mint, Token, TokenAccount, MintTo, Transfer};
use anchor_spl::associated_token::AssociatedToken;
use mpl_token_metadata::{
    instructions::{CreateMetadataAccountV3, CreateMetadataAccountV3InstructionArgs},
    types::{DataV2, Creator, Collection},
};

declare_id!("YourProgramIDHere"); // Will be generated by Playground

#[program]
pub mod analos_nft_launcher {
    use super::*;

    pub fn initialize_collection(
        ctx: Context<InitializeCollection>,
        name: String,
        symbol: String,
        description: String,
        image_uri: String,
    ) -> Result<()> {
        let collection_account = &mut ctx.accounts.collection_account;
        
        collection_account.name = name;
        collection_account.symbol = symbol;
        collection_account.description = description;
        collection_account.image_uri = image_uri;
        collection_account.creator = ctx.accounts.creator.key();
        collection_account.created_at = Clock::get()?.unix_timestamp;
        collection_account.is_deployed = false;
        collection_account.mint_count = 0;
        
        msg!("Collection initialized: {} by {}", collection_account.name, ctx.accounts.creator.key());
        Ok(())
    }

    pub fn mint_nft(
        ctx: Context<MintNFT>,
        metadata_uri: String,
    ) -> Result<()> {
        let collection_account = &mut ctx.accounts.collection_account;
        
        // Check if collection is deployed
        require!(collection_account.is_deployed, ErrorCode::CollectionNotDeployed);
        
        // Mint the token
        let cpi_accounts = MintTo {
            mint: ctx.accounts.mint.to_account_info(),
            to: ctx.accounts.token_account.to_account_info(),
            authority: ctx.accounts.authority.to_account_info(),
        };
        let cpi_program = ctx.accounts.token_program.to_account_info();
        let cpi_ctx = CpiContext::new(cpi_program, cpi_accounts);
        token::mint_to(cpi_ctx, 1)?;
        
        // Update collection stats
        collection_account.mint_count += 1;
        
        msg!("NFT minted for collection: {}", collection_account.name);
        Ok(())
    }

    pub fn deploy_collection(ctx: Context<DeployCollection>) -> Result<()> {
        let collection_account = &mut ctx.accounts.collection_account;
        collection_account.is_deployed = true;
        collection_account.deployed_at = Clock::get()?.unix_timestamp;
        
        msg!("Collection deployed: {}", collection_account.name);
        Ok(())
    }
}

#[derive(Accounts)]
pub struct InitializeCollection<'info> {
    #[account(
        init,
        payer = creator,
        space = 8 + CollectionAccount::INIT_SPACE,
        seeds = [b"collection", creator.key().as_ref()],
        bump
    )]
    pub collection_account: Account<'info, CollectionAccount>,
    #[account(mut)]
    pub creator: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct MintNFT<'info> {
    #[account(
        mut,
        constraint = collection_account.creator == authority.key()
    )]
    pub collection_account: Account<'info, CollectionAccount>,
    #[account(mut)]
    pub mint: Account<'info, Mint>,
    #[account(mut)]
    pub token_account: Account<'info, TokenAccount>,
    #[account(mut)]
    pub authority: Signer<'info>,
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct DeployCollection<'info> {
    #[account(
        mut,
        constraint = collection_account.creator == deployer.key(),
        constraint = !collection_account.is_deployed
    )]
    pub collection_account: Account<'info, CollectionAccount>,
    pub deployer: Signer<'info>,
}

#[account]
#[derive(InitSpace)]
pub struct CollectionAccount {
    pub name: String,
    pub symbol: String,
    pub description: String,
    pub image_uri: String,
    pub creator: Pubkey,
    pub created_at: i64,
    pub deployed_at: i64,
    pub is_deployed: bool,
    pub mint_count: u32,
}

#[error_code]
pub enum ErrorCode {
    #[msg("Collection is not deployed yet")]
    CollectionNotDeployed,
}
